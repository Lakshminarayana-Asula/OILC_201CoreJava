					     MOCK Exam	
				LAKSHMINARAYANA ASULA (OILC_201)
						21192


1. b 
2. 1
3. b
4. 3
5. 5
6. 3
7. 
8.
9. a,b
10. b 
11. 2
12. 3
13. 3
14. Number
15. false, true
16. 12

17. JVM is a virtual machine, that provides runtime environment in which java byte code can be executed.
    JVM needs to be installed on your computer depending on what platform do you have and what version of it.
    JVM, JRE, JDK are platform dependent because configuration of each OS is different.

18. The Availability of Object-Oriented Programming made java stand out from all other remaining languages.
    Java was developed to use OOP at its core and it was one of a reason for being a most used language.
    This concept increases reusability, seamless execution. 

19. Object is the super class of all classes.

20. Path: The path environment variable is used to specify the set of directories which contains executional programs.
    classPath: The class path environment variable is used to specify the location of the classes and packages.

21.Natural numbers using method.
	
	import java.util.*;
	public class NaturalNumbers {
		public static void main(String[] args) {
			Scanner sc = new Scanner(System.in);
			
			System.out.println("Enter two numbers: \nNote: first value should be smaller than second value");
		
			System.out.println(getNaturalNumbers(sc.nextInt(), sc.nextInt()));
		}
	
		static String getNaturalNumbers(int firstNum, int secNum) {
			String output = "";
		
			if(firstNum < 0 || secNum <0) {
				output += -1;
			}
			else if(firstNum == 0 || secNum == 0) {
				output += -2;
			}
			else {
				while(firstNum <= secNum) {
					output += firstNum + " ";
				
					firstNum++;
				}
			}
		
		return output;
		}
	}

22. Reverse of The String.

	import java.util.*;
	class ReverseString{
		public static void main(String[] args){
			Scanner sc = new Scanner(System.in);
			System.out.println("Enter String");
			String str = sc.nextLine();

			System.out.println(reverse(str));
		}

		static String reverse(String str){
			String out = "";

			for(int i = str.length()-1; i >= 0;i++){
				out += str.charAt(i);
			}

			return out;
		}
	}

23. Russian Multiplication Table:

	public class RussianMultiplication {
		static int getProduct(int num1, int num2) {
			int total = 0;
			if((num1 <= 0) || (num2 <= 0)) {
				return -1;
			}
			else {
				if(num1 % 2 != 0){
					total = total+num2;
				}
				while(num1 != 0) {
					num1 = num1 / 2;
					num2 = num2 * 2;
					if(num1 % 2 == 1) {
						total = total + num2 ;
					}
				}
			return total;
			}
		}

		public static void main(String[] args) {
			int num1 =10, num2 = 5;
			System.out.println(getProduct(num1, num2));
		}
	}

24. Final keyword we can use 3 levels.
	1. class level: we cannot create child class or sub class.
	2. method level: we cannot override the method in sub class.
	3. variables: At the time of declaring final variable we must initialized it because we cannot modified final variables.

25. Package in java is used to group related classes. There are two types of packages in java.
	1. Built-in packages.
	2. Used-defined packages.
    User-defined packages are creating by using package keyword. Ex: Package packagename.

26. An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions during the execution of a program.
    we can handle the exceptions in Multiple ways.
	1. using try-catch.
	2. using throw.
	3. using throws.

27. this: this keyword is used to call current class methods, variables and constructors.
    super: super keyword is used to call super class methods, variables and constructors.

28. NullPointerException: NullPointerException is a runtime exception and it is thrown when the application try to use an object reference which has a null value.
			  If we are trying to compare any value with null value then we will get NullPointerException.

29. By using throw keyword we create our own exceptions.
	Ex: throw new ArithmeticException("Hello");

30. Sorting array in Ascending order.

	import java.util.*;
	class SortArray{
		public static void main(String[] args){
			Scanner sc = new Scanner(System.in);
			System.out.println("enter array size");
			int size = sc.nextInt();
			int arr[] = new arr[size];
			System.out.println("enter array elements");
			for(int i = 0; i < size;i++){
				arr[i] = sc.nextInt();	
			}
		}

		static void sorting(int size, int[] arr){
			for(int i = 0;i < size;i++){
				for(int j = i + 1; j < size; j++){
					if(arr[i] > arr[j]){
						int temp = arr[i];
						arr[i] = arr[j];
						arr[j] = temp;
					}
				}
			}

			System.out.println("array elements in ascending order is :");
			for(int i = 0; i < size; i++){
				System.out.print(arr[i] + " ");
			}
		}
	}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


